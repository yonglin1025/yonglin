var fcad = function () {
	var _version = "1.0.3",
		_debug = false;
	var _publisherId = "",
		_root = "";
	var _req = {
		ipb: "", // publisherId
		ppid: "", // placementId
		v: "", // sdk version
		uuid: "", // 通过算法计算，Server上次请求广告种到客户端的
		scbri: "", // 屏幕亮度
		at: {}, // authSetting
		u: {}, // user
		loc: {}, // location
		dev: {}, // device
		net: {}, // network
		app: {} // accountinfo
	}
	var _resp = {
		rid: "",
		uuid: "",
		at: "",
		st: {
			wrap: "",
			media: "",
			view: "",
			icon: ""
		},
		ma: {
			media: "",
			dest: ""
		},
		tr: {
			imp: [],
			clk: [],
			act: []
		},
		runtime: {}
	}

	function log(inp, iserr) {
		iserr = iserr || false;
		_debug && console.log(inp);
		if (iserr) {
			tracking("https://engine.fcadx.cn/e/exp?req=" + JSON.stringify(_req) + "&msg=" + encodeURIComponent(inp))
		}
	}

	function getCurrentPage() {
		return getCurrentPages().pop();
	}

	function getFcuuid() {
		try {
			return wx.getStorageSync("fcuuid")
		} catch (e) {
			log(e, true)
		}
	}

	function setFcuuid(val) {
		try {
			wx.setStorageSync("fcuuid", val)
		} catch (e) {
			log(e, true)
		}
	}

	function buildReqStruct() {
		function b(setting) {
			_req.ipb = _publisherId;
			_req.v = _version;
			_req.uuid = getFcuuid();
			_req.at = setting;
			try {
				wx.getAccountInfoSync && (_req.app = wx.getAccountInfoSync())
			} catch (e) {
				log(e, true)
			}
			try {
				wx.getSystemInfoSync && (_req.dev = wx.getSystemInfoSync())
			} catch (e) {
				log(e, true)
			}
			wx.getScreenBrightness && wx.getScreenBrightness({
				success: function (res) {
					_req.scbri = res.value
				},
				fail: function (res) {
					log(res, true)
				}
			});
			wx.getNetworkType({
				success: function (res) {
					_req.net = res.networkType
				},
				fail: function (res) {
					log(res, true)
				}
			});
			setting["scope.userInfo"] && wx.getUserInfo({
				success: function (res) {
					_req.u = res
				},
				fail: function (res) {
					log(res, true)
				}
			});
			setting["scope.userLocation"] && wx.getLocation({
				success: function (res) {
					_req.loc = res
				},
				fail: function (res) {
					log(res, true)
				}
			});
		}
		wx.getSetting({
			success: function (res) {
				b(res.authSetting)
			},
			fail: function (res) {
				log(res, true)
			}
		})
	}

	function override(c, fname, func) {
		if (c[fname]) {
			var t = c[fname];
			c[fname] = function () {
				func.apply(func, arguments);
				return t.apply(t, arguments)
			}
		} else {
			c[fname] = func;
		}
	}

	function tracking(url, retry) {
		retry = retry || 0;
		wx.request({
			url: url + (_debug ? "&ipb=" + _publisherId : ""),
			success: function (res) {
				if (res.statusCode != 200) {
					retry < 2 ? setTimeout(function () {
						tracking(url, ++retry)
					}, 100) : log("track [url=" + url + "] code: " + res.statusCode, true);
				}
			},
			fail: function (res) {
				retry < 2 ? setTimeout(function () {
					tracking(url, ++retry)
				}, 100) : log("track [url=" + url + "] fail: " + res, true);
			}
		});
	}

	var app = function (ipb, root, debug) {
		_publisherId = ipb;
		_root = (!root || "/") ? "" : root;
		_debug = debug || false;
		buildReqStruct();

		return {
			getVersion: function () {
				return _version;
			}
		}
	}

	var page = function (c) {
		c["fcad"] = {
			getVersion: function () {
				return _version;
			},
			load: load,
			close: close,
		}
		c["data"] || (c["data"] = {});
		c.data["fcad"] = {}
		override(c, "fcadShow", function (res) {
			res.detail.data.tr.imp.forEach(function (u) {
				tracking(u)
			})
		})
		override(c, "fcadClick", function (res) {
			res.detail.data.tr.clk.forEach(function (u) {
				tracking(u)
			});
			var dest = res.detail.data.ma.dest.split("://");
			switch (dest[0]) {
				case "lp":
					if (res.detail.data.at == "4") {
						wx.navigateTo({
							url: res.detail.data.ma.url
						})
					}
					break;
				case "call":
					wx.makePhoneCall({
						phoneNumber: dest[1],
						fail: function (res) {
							log("call fail: " + res.errMsg, true)
						}
					});
					break;
				case "mini":
					if (res.detail.data.at == "4") {
						wx.navigateToMiniProgram({
							appId: res.detail.data.ma.appid,
							path: res.detail.data.ma.path,
							extraData: res.detail.data.ma.extradata,
							envVersion: res.detail.data.ma.version,
							success: function () {
								getCurrentPage().fcadClickSucc(res);
							},
							fail: function (e) {
								res.detail.data.data = res.detail.data
								res.detail.err = e.errMsg
								getCurrentPage().fcadClickError(res);
							}
						})
					}
					break;
				default:
					log("unknown scheme: " + dest[0])
			}
		})
		override(c, "fcadClose", function (res) {
			close(res.detail.data.runtime.macro);
		})
		override(c, "fcadClickSucc", function (res) {
			res.detail.data.tr.act.forEach(function (u) {
				tracking(u)
			})
		})
		override(c, "fcadClickError", function (res) {
			log("open miniProgram#" + res.detail.data.data.ma.dest + " error: " + res.detail.err, true)
		})
		Page(c)
	}

	function close(macro) {
		var page = getCurrentPage();
		var adData = page.data.fcad;
		if (!adData[macro]) {
			return
		}
		var closeFname = adData[macro].runtime.close;
		closeFname && page.fcad[closeFname] && page.fcad[closeFname]();
		delete adData[macro];
		page.setData({
			fcad: adData
		});
		log("close ad success")
	}

	function load(macro, ppid, obj) {
		reqad(macro, ppid, {
			success: function (res) {
				if (!res) return;
				log("load ad success");
				setFcuuid(res.uuid);
				res.runtime.macro = macro;
				if (obj.close) {
					var fname = "close_" + (new Date().getTime());
					getCurrentPage().fcad[fname] = obj.close;
					res.runtime.close = fname;
				}
				render(macro, res, {
					success: function () {
						obj && obj.success && obj.success()
						obj && obj.complete && obj.complete()
						log("render ad success");
					},
					fail: function (res) {
						obj && obj.fail && obj.fail()
						obj && obj.complete && obj.complete()
						log("render fail, " + res, true);
					}
				});
			},
			fail: function (res) {
				obj && obj.fail && obj.fail()
				obj && obj.complete && obj.complete()
				log(res, true)
			},
		})
	}

	function reqad(macro, ppid, obj, retry) {
		buildReqStruct();
		retry = retry || 0;
		var data = {};
		var req = JSON.parse(JSON.stringify(_req));
		req.ppid = ppid;
		wx.request({
			url: "https://engine.fcadx.cn/ad" + (_debug ? "?ipb=" + _publisherId : ""),
			data: req,
			method: "POST",
			success: function (res) {
				if (res.statusCode != 200) {
					retry < 2 ? setTimeout(function () {
							load(macro, ppid, obj, ++retry)
						}, 1000) :
						obj.fail("ad api exp code: " + JSON.stringify(res));
					return
				}
				if (res.data == "") {
					obj.fail("no ad");
					return
				}
				var data = JSON.parse(JSON.stringify(_resp));
				data.rid = res.data.rid || "";
				data.uuid = res.data.uuid || "";
				data.at = res.data.at || "";
				if (res.data.st) {
					data.st.wrap = res.data.st.wrap || "";
					data.st.media = res.data.st.media || "";
					data.st.view = res.data.st.view || "";
					data.st.icon = res.data.st.icon || "";
				}
				if (res.data.ma) {
					data.ma.media = res.data.ma.media || "";
					data.ma.dest = res.data.ma.dest || "";
				}
				if (res.data.tr) {
					data.tr.imp = res.data.tr.imp || "";
					data.tr.clk = res.data.tr.clk || "";
					data.tr.act = res.data.tr.act || "";
				}
				obj.success(data)
			},
			fail: function (res) {
				retry < 2 ? setTimeout(function () {
						load(macro, ppid, obj, ++retry)
					}, 100) :
					obj.fail("ad api exp msg: " + JSON.stringify(res));
			}
		});
	}

	function render(macro, data, obj) {
		close(macro);
		if (!data) {
			obj.fail("data is empty");
			return
		}

		var dest = data.ma.dest.split("://");
		switch (dest[0]) {
			case "lp":
				data.ma.navto = true;
				data.ma.target = "self";
				data.ma.url = _root + "/fcad_sdk/pages/ad?u=" + dest[1];
				data.ma.opentype = "navigate";
				break
			case "call":
				break;
			case "mini":
				var t = /(\w+)([\w\/]*)[\?]?([\w]*)[#]?([\w]*)/.exec(dest[1])
				data.ma.navto = true;
				data.ma.target = "miniProgram";
				data.ma.opentype = "navigate";
				data.ma.appid = t[1] || "";
				data.ma.path = (t[2] && t[2] != "/") ? t[2] : "";
				data.ma.extradata = t[3] ? {
					args: t[3]
				} : {
					args: ""
				};
				data.ma.version = t[4] || "release";
				break;
			default:
				obj.fail("unknown scheme: " + dest[0]);
				return;
		}
		switch (data.at) {
			case "4":
				data.st.wrap += "display: block;";
				break;
		}
		var adData = {};
		adData["fcad." + macro] = data;
		getCurrentPages().pop().setData(adData)
		obj.success()
	}

	return {
		App: app,
		Page: page,
		Component: function (c) {
			c.methods = c.methods || {};
			override(c.methods, "click", function (e) {
				this.triggerEvent("click", this.data)
			})
			override(c.methods, "close", function (e) {
				this.triggerEvent("close", this.data)
			})
			override(c.methods, "clicksucc", function (e) {
				this.triggerEvent("clicksucc", this.data)
			})
			override(c.methods, "clickerror", function (e) {
				this.triggerEvent("clickerror", {
					data: this.data,
					err: e.detail.errMsg
				});
			})
			override(c, "ready", function () {
				var that = this;
				that.createIntersectionObserver({
						observeAll: true
					}).relativeToViewport()
					.observe(".placement", function (res) {
						res.intersectionRatio > 0 && that.triggerEvent("show", that.data);
					})
			});
			override(c.methods, "loadsucc", function (e) {
				switch (this.data.data.at) {
					case "1":
						this.data.data.st.wrap += "display: block;";
						break;
					case "2":
					case "3":
						this.data.data.st.wrap += "display: block; height: 1px; width: 1px; position: absolute;";
						break;
				}
				this.setData(this.data);
			})
			Component(c)
		}
	}
}()

// 对外导出App/Page/Component对象
exports.App = fcad.App;
exports.Page = fcad.Page;
exports.Component = fcad.Component;

// 自动在Page中生成fcad节点和fcadClick等节点
// 自动在Page.data中生成fcad节点
/*
Page({
	data: {
		fcad: {}
	},
	fcad: {},
	fcadClick: function(){
	}
})
*/